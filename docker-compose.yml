version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ninjalinking-postgres
    environment:
      POSTGRES_DB: ninjalinking_db
      POSTGRES_USER: ninjalinking_user
      POSTGRES_PASSWORD: ninjalinking_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ninjalinking-network
    restart: unless-stopped

  # Redis pour le cache (optionnel)
  redis:
    image: redis:7-alpine
    container_name: ninjalinking-redis
    ports:
      - "6379:6379"
    networks:
      - ninjalinking-network
    restart: unless-stopped

  # Application NinjaLinking
  app:
    build: .
    container_name: ninjalinking-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ninjalinking_user:ninjalinking_password@postgres:5432/ninjalinking_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=5000
    ports:
      - "3000:3000"
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - ninjalinking-network
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads

  # Nginx pour le reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: ninjalinking-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - ninjalinking-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  ninjalinking-network:
    driver: bridge
